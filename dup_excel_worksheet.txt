Sub DuplicateTemplateWorksheet()
    Dim wsTemplate As Worksheet
    Dim newWorksheetName As String
    Dim ws As Worksheet
    Dim nameExists As Boolean
    Dim tbl As ListObject
    Dim activeRow As ListRow
    
    ' Error handling
    On Error GoTo ErrorHandler
    
    ' ============================================
    ' CHANGE THIS TO YOUR ACTUAL TABLE NAME
    ' ============================================
    Const TABLE_NAME As String = "TemplateTable"
    
    ' Find the table in the workbook
    Dim foundTable As Boolean
    foundTable = False
    
    For Each ws In ThisWorkbook.Worksheets
        For Each tbl In ws.ListObjects
            If tbl.Name = TABLE_NAME Then
                Set tbl = ws.ListObjects(TABLE_NAME)
                foundTable = True
                Exit For
            End If
        Next tbl
        If foundTable Then Exit For
    Next ws
    
    If Not foundTable Then
        MsgBox "Table '" & TABLE_NAME & "' not found in the workbook." & vbCrLf & _
               "Please update the TABLE_NAME constant in the VBA code.", _
               vbCritical, "Table Not Found"
        Exit Sub
    End If
    
    ' Check if active cell is within the table
    On Error Resume Next
    Set activeRow = tbl.ListRows(ActiveCell.Row - tbl.HeaderRowRange.Row)
    On Error GoTo ErrorHandler
    
    If activeRow Is Nothing Then
        MsgBox "Please select a cell within the '" & TABLE_NAME & "' table.", _
               vbExclamation, "Selection Outside Table"
        Exit Sub
    End If
    
    ' Get the template name from the Template Name column (first column)
    newWorksheetName = Trim(activeRow.Range(1).Value)
    
    ' Check if template name is empty
    If newWorksheetName = "" Then
        MsgBox "The Template Name cell is empty. Please enter a valid name.", _
               vbExclamation, "Empty Template Name"
        Exit Sub
    End If
    
    ' Validate worksheet name for illegal characters
    Dim invalidChars As Variant
    Dim i As Integer
    invalidChars = Array("/", "\", "?", "*", "[", "]", ":")
    
    For i = 0 To UBound(invalidChars)
        If InStr(newWorksheetName, invalidChars(i)) > 0 Then
            MsgBox "The worksheet name contains invalid character: " & invalidChars(i) & _
                   vbCrLf & "Please remove invalid characters: / \ ? * [ ] :", _
                   vbExclamation, "Invalid Character"
            Exit Sub
        End If
    Next i
    
    ' Check if name is too long (Excel limit is 31 characters)
    If Len(newWorksheetName) > 31 Then
        MsgBox "Worksheet name cannot exceed 31 characters." & vbCrLf & _
               "Current length: " & Len(newWorksheetName) & " characters", _
               vbExclamation, "Name Too Long"
        Exit Sub
    End If
    
    ' Check if "template" worksheet exists
    On Error Resume Next
    Set wsTemplate = ThisWorkbook.Worksheets("template")
    On Error GoTo ErrorHandler
    
    If wsTemplate Is Nothing Then
        MsgBox "The 'template' worksheet does not exist in this workbook.", _
               vbCritical, "Template Not Found"
        Exit Sub
    End If
    
    ' Check if a worksheet with the new name already exists
    nameExists = False
    For Each ws In ThisWorkbook.Worksheets
        If LCase(ws.Name) = LCase(newWorksheetName) Then
            nameExists = True
            Exit For
        End If
    Next ws
    
    If nameExists Then
        MsgBox "A worksheet with the name '" & newWorksheetName & _
               "' already exists." & vbCrLf & _
               "Please choose a different name.", _
               vbExclamation, "Duplicate Name"
        Exit Sub
    End If
    
    ' Update the Date Created column (second column) BEFORE duplicating
    activeRow.Range(2).Value = Now()
    activeRow.Range(2).NumberFormat = "mm/dd/yyyy hh:mm:ss"
    
    ' Duplicate the template worksheet
    wsTemplate.Copy After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count)
    
    ' Rename the newly created worksheet
    ActiveSheet.Name = newWorksheetName
    
    ' Force the tab color to yellow (clear any existing color first)
    Dim newSheet As Worksheet
    Set newSheet = ThisWorkbook.Worksheets(newWorksheetName)
    
    ' Clear the color theme first, then set to yellow
    newSheet.Tab.ColorIndex = xlColorIndexNone
    DoEvents ' Allow Excel to process the change
    newSheet.Tab.Color = 65535 ' Yellow using color value instead of RGB
    
    ' Activate the new worksheet
    newSheet.Activate
    
    ' Success message
    MsgBox "Successfully created new worksheet: '" & newWorksheetName & "'" & vbCrLf & _
           "Timestamp added: " & Format(Now(), "mm/dd/yyyy hh:mm:ss"), _
           vbInformation, "Success"
    
    Exit Sub
    
ErrorHandler:
    MsgBox "An error occurred: " & Err.Description & vbCrLf & _
           "Error Number: " & Err.Number, _
           vbCritical, "Error"
End Sub
