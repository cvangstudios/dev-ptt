Option Explicit

' Add reference to Microsoft Scripting Runtime for Dictionary and FileSystemObject
' Tools -> References -> Microsoft Scripting Runtime

Private nearEndDevices As Dictionary
Private farEndDevices As Dictionary

Sub CreateDeviceDictionaries()
    Dim ws As Worksheet
    Dim lastRow As Long, i As Long
    Dim deviceInfo As Dictionary
    Dim nearEndDevice As String, farEndDevice As String
    Dim nearEndType As String, farEndType As String
    Dim nearEndPort As String, farEndPort As String
    Dim portStatus As String
    
    ' Set the source worksheet to "caw"
    Set ws = ThisWorkbook.Worksheets("caw")
    
    ' Find the last row with data
    lastRow = ws.Cells(ws.Rows.Count, "A").End(xlUp).Row
    
    ' Initialize dictionaries
    Set nearEndDevices = New Dictionary
    Set farEndDevices = New Dictionary
    
    ' Loop through the data and populate dictionaries
    For i = 2 To lastRow ' Start from row 2 to skip header
        nearEndType = CStr(ws.Cells(i, "A").Value)
        nearEndDevice = CStr(ws.Cells(i, "B").Value)
        nearEndPort = CStr(ws.Cells(i, "C").Value)
        farEndType = CStr(ws.Cells(i, "D").Value)
        farEndDevice = CStr(ws.Cells(i, "E").Value)
        farEndPort = CStr(ws.Cells(i, "F").Value)
        portStatus = CStr(ws.Cells(i, "G").Value)
        
        ' Process Near End Device
        If Not nearEndDevices.Exists(nearEndDevice) Then
            Set deviceInfo = New Dictionary
            deviceInfo.Add "type", nearEndType
            deviceInfo.Add "ports", New Dictionary
            nearEndDevices.Add nearEndDevice, deviceInfo
        End If
        nearEndDevices(nearEndDevice)("ports")(nearEndPort) = portStatus
        
        ' Process Far End Device
        If Not farEndDevices.Exists(farEndDevice) Then
            Set deviceInfo = New Dictionary
            deviceInfo.Add "type", farEndType
            deviceInfo.Add "ports", New Dictionary
            farEndDevices.Add farEndDevice, deviceInfo
        End If
        farEndDevices(farEndDevice)("ports")(farEndPort) = portStatus
    Next i
    
    Debug.Print "Device dictionaries created successfully."
End Sub

Function GetUserHomeDirectory() As String
    Dim homeDir As String
    
    ' Try USERPROFILE first (works on most Windows versions including 11)
    homeDir = Environ$("USERPROFILE")
    
    ' If USERPROFILE is empty, try HOMEDRIVE + HOMEPATH
    If homeDir = "" Then
        homeDir = Environ$("HOMEDRIVE") & Environ$("HOMEPATH")
    End If
    
    ' If still empty, try a default path
    If homeDir = "" Then
        homeDir = "C:\Users\" & Environ$("USERNAME")
    End If
    
    ' Ensure the path ends with a backslash
    If Right(homeDir, 1) <> "\" Then
        homeDir = homeDir & "\"
    End If
    
    GetUserHomeDirectory = homeDir
End Function

Sub GenerateCommandLists()
    Dim device As Variant
    Dim deviceInfo As Dictionary
    Dim aristaCommands As String
    Dim ciscoCommands As String
    Dim avocentCommands As String
    Dim ws As Worksheet
    Dim currentColumn As Long
    Dim scriptFilesPath As String
    
    ' Call the function to create device dictionaries
    Call CreateDeviceDictionaries
    
    ' Get the path to the scriptFiles folder in the user's home directory
    scriptFilesPath = GetUserHomeDirectory() & "scriptFiles\"
    
    ' Read command templates from files in the scriptFiles folder
    aristaCommands = ReadCommandFile(scriptFilesPath & "aristaCommands.txt")
    ciscoCommands = ReadCommandFile(scriptFilesPath & "ciscoCommands.txt")
    avocentCommands = ReadCommandFile(scriptFilesPath & "avocentCommands.txt")
    
    ' Check if all command files were read successfully
    If aristaCommands = "" Or ciscoCommands = "" Or avocentCommands = "" Then
        MsgBox "Failed to read one or more command files. Please ensure they exist in " & scriptFilesPath, vbExclamation
        Exit Sub
    End If
    
    ' Create or clear the "Project Commands" sheet
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("Project Commands")
    On Error GoTo 0
    
    If ws Is Nothing Then
        Set ws = ThisWorkbook.Worksheets.Add(After:=ThisWorkbook.Worksheets(ThisWorkbook.Worksheets.Count))
        ws.Name = "Project Commands"
    Else
        ws.Cells.Clear
    End If
    
    currentColumn = 1 ' Start from the first column
    
    ' Process near-end devices
    For Each device In nearEndDevices.Keys
        currentColumn = ProcessDevice(nearEndDevices(device), CStr(device), aristaCommands, ciscoCommands, avocentCommands, ws, currentColumn)
    Next device
    
    ' Process far-end devices
    For Each device In farEndDevices.Keys
        currentColumn = ProcessDevice(farEndDevices(device), CStr(device), aristaCommands, ciscoCommands, avocentCommands, ws, currentColumn)
    Next device
    
    ' Auto-fit columns
    ws.Columns.AutoFit
    
    MsgBox "Command lists have been generated in the 'Project Commands' sheet.", vbInformation
End Sub

Function ReadCommandFile(filePath As String) As String
    Dim fso As New FileSystemObject
    Dim txtFile As TextStream
    Dim line As String
    Dim commandContent As String
    
    If fso.FileExists(filePath) Then
        Set txtFile = fso.OpenTextFile(filePath, ForReading)
        
        Do While Not txtFile.AtEndOfStream
            line = Trim(txtFile.ReadLine)
            ' Ignore lines starting with #
            If Left(line, 1) <> "#" Then
                commandContent = commandContent & line & vbNewLine
            End If
        Loop
        
        txtFile.Close
        ReadCommandFile = Trim(commandContent)
    Else
        MsgBox "Command file not found: " & filePath & vbNewLine & _
               "Please ensure it exists in the scriptFiles folder in your home directory.", vbExclamation
        ReadCommandFile = ""
    End If
End Function

Function ProcessDevice(ByVal deviceInfo As Dictionary, ByVal deviceName As String, ByVal aristaTemplate As String, ByVal ciscoTemplate As String, ByVal avocentTemplate As String, ByVal ws As Worksheet, ByVal startColumn As Long) As Long
    Dim deviceType As String
    Dim interfaceList As String
    Dim commandList As String
    Dim commandLines() As String
    Dim i As Long
    Dim currentRow As Long
    Dim port As Variant
    Dim portStatus As String
    
    deviceType = LCase(CStr(deviceInfo("type")))
    
    ' Skip if device type is server
    If deviceType = "server" Then
        ProcessDevice = startColumn
        Exit Function
    End If
    
    ' Create interface list (using Dictionary keys to avoid duplicates)
    interfaceList = Join(deviceInfo("ports").Keys, ",")
    
    ' Generate command list based on device type
    Select Case deviceType
        Case "arista"
            commandList = Replace(aristaTemplate, "[interfaces]", interfaceList)
        Case "cisco"
            commandList = Replace(ciscoTemplate, "[interfaces]", interfaceList)
        Case "console"
            commandList = Replace(avocentTemplate, "[interfaces]", interfaceList)
        Case Else
            ProcessDevice = startColumn
            Exit Function ' Skip unknown device types
    End Select
    
    ' Write device name as header
    ws.Cells(1, startColumn).Value = deviceName
    ws.Cells(1, startColumn).Font.Bold = True
    
    ' Add white space
    currentRow = 3
    
    ' Write Device Info section
    ws.Cells(currentRow, startColumn).Value = "Device Info:"
    ws.Cells(currentRow, startColumn).Font.Bold = True
    currentRow = currentRow + 1
    
    ws.Cells(currentRow, startColumn).Value = "Type: " & deviceType
    currentRow = currentRow + 1
    
    ws.Cells(currentRow, startColumn).Value = "Ports:"
    currentRow = currentRow + 1
    
    For Each port In deviceInfo("ports")
        portStatus = deviceInfo("ports")(port)
        ws.Cells(currentRow, startColumn).Value = "  " & port & " (" & portStatus & ")"
        currentRow = currentRow + 1
    Next port
    
    ' Add white space
    currentRow = currentRow + 2
    
    ' Write Commands header
    ws.Cells(currentRow, startColumn).Value = "Commands:"
    ws.Cells(currentRow, startColumn).Font.Bold = True
    currentRow = currentRow + 1
    
    ' Write commands
    commandLines = Split(commandList, vbNewLine)
    For i = 0 To UBound(commandLines)
        ws.Cells(currentRow + i, startColumn).Value = commandLines(i)
    Next i
    
    ' Add more white space at the end (10 empty rows)
    currentRow = currentRow + UBound(commandLines) + 10
    
    ' Add a border around the entire device section
    ws.Range(ws.Cells(1, startColumn), ws.Cells(currentRow, startColumn)).BorderAround Weight:=xlMedium
    
    ' Return the next column to write to
    ProcessDevice = startColumn + 1
End Function

Sub CreateCommandGeneratorButton()
    Dim ws As Worksheet
    Dim btn As Button
    
    ' Use the "caw" sheet
    Set ws = ThisWorkbook.Worksheets("caw")
    
    ' Add a button
    Set btn = ws.Buttons.Add(100, 10, 150, 30)
    
    ' Set button properties
    With btn
        .OnAction = "GenerateCommandLists"
        .Caption = "Generate Command Lists"
        .Name = "CommandGeneratorButton"
    End With
    
    MsgBox "Button added to the 'caw' sheet. Click it to generate command lists.", vbInformation
End Sub

Sub DeleteProjectCommandsSheet()
    Dim ws As Worksheet
    
    Application.DisplayAlerts = False ' Suppress delete confirmation dialog
    
    On Error Resume Next
    Set ws = ThisWorkbook.Worksheets("Project Commands")
    If Not ws Is Nothing Then
        ws.Delete
    End If
    On Error GoTo 0
    
    Application.DisplayAlerts = True ' Re-enable alerts
    
    MsgBox "The 'Project Commands' sheet has been deleted.", vbInformation
End Sub

Sub CreateCleanupButton()
    Dim ws As Worksheet
    Dim btn As Button
    
    ' Use the "caw" sheet
    Set ws = ThisWorkbook.Worksheets("caw")
    
    ' Add a button
    Set btn = ws.Buttons.Add(100, 50, 150, 30) ' Adjust position and size as needed
    
    ' Set button properties
    With btn
        .OnAction = "DeleteProjectCommandsSheet"
        .Caption = "Clean Up Commands"
        .Name = "CleanUpCommandsButton"
    End With
    
    MsgBox "Cleanup button added to the 'caw' sheet. Click it to delete the 'Project Commands' sheet.", vbInformation
End Sub
